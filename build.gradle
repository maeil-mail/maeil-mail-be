import static com.linecorp.support.project.multi.recipe.BuildRecipeExtensionsKt.configureByTypeHaving

plugins {
    id 'com.linecorp.build-recipe-plugin' version '1.1.1'
    id 'org.springframework.boot' version '3.5.3' apply false
    id 'io.spring.dependency-management' version '1.1.7' apply false
}

allprojects {
    repositories {
        mavenCentral()
    }
}

configureByTypeHaving(project, ['java'] as String[]) {
    def javaVersion = '17'

    configure(it) {
        apply plugin: 'java'

        java {
            sourceCompatibility = JavaVersion.toVersion(javaVersion)
            targetCompatibility = JavaVersion.toVersion(javaVersion)

            toolchain {
                languageVersion = JavaLanguageVersion.of(javaVersion)
            }
        }

        configurations {
            compileOnly {
                extendsFrom annotationProcessor
            }
        }

        dependencies {
            compileOnly 'org.projectlombok:lombok'
            annotationProcessor 'org.projectlombok:lombok'
            testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
        }

        test {
            useJUnitPlatform()
        }
    }
}

configureByTypeHaving(project, ['java', 'boot'] as String[]) {
    configure(it) {
        apply plugin: 'org.springframework.boot'
        apply plugin: 'io.spring.dependency-management'

        dependencies {
            annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
            testImplementation 'org.springframework.boot:spring-boot-starter-test'
        }
    }
}

configureByTypeHaving(project, ['boot', 'mvc', 'application'] as String[]) {
    configure(it) {
        bootJar {
            enabled = true
        }

        jar {
            enabled = false
        }

        dependencies {
            implementation 'org.springframework.boot:spring-boot-starter-actuator'
            implementation 'io.micrometer:micrometer-registry-datadog'
            implementation 'org.springframework.boot:spring-boot-starter-cache'
            implementation 'com.github.ben-manes.caffeine:caffeine:3.1.8'
        }
    }
}

configureByTypeHaving(project, ['boot', 'batch', 'application'] as String[]) {
    configure(it) {
        bootJar {
            enabled = true
        }

        jar {
            enabled = false
        }

        dependencies {
            implementation 'org.springframework.boot:spring-boot-starter-batch'
            implementation 'org.springframework.boot:spring-boot-starter-cache'
            implementation 'com.github.ben-manes.caffeine:caffeine:3.1.8'
        }
    }
}

configureByTypeHaving(project, ['boot', 'lib'] as String[]) {
    configure(it) {
        apply plugin: 'java-library'

        bootJar {
            enabled = false
        }

        jar {
            enabled = true
        }
    }
}

configureByTypeHaving(project, ['boot', 'mvc'] as String[]) {
    configure(it) {
        dependencies {
            implementation 'org.springframework.boot:spring-boot-starter-web'
        }
    }
}

configureByTypeHaving(project, ['boot', 'data'] as String[]) {
    configure(it) {
        dependencies {
            api 'org.springframework.boot:spring-boot-starter-data-jpa'
            api 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
            annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
            annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
            annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
            runtimeOnly 'com.h2database:h2'
            runtimeOnly 'com.mysql:mysql-connector-j'
        }
    }
}

configureByTypeHaving(project, ['boot', 'mail'] as String[]) {
    configure(it) {
        dependencies {
            implementation 'org.springframework.boot:spring-boot-starter-mail'
            implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
            implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'
        }
    }
}
